//! runtextmacro Folder("RazorBladeDrawBack")
    //! runtextmacro Struct("Blade")
        static Group ENUM_GROUP
        static BoolExpr TARGET_FILTER
        //! runtextmacro CreateHumanEyeTime("UPDATE_TIME", "2")
        static Timer UPDATE_TIMER

        //! runtextmacro CreateList("ACTIVE_LIST")
        //! runtextmacro CreateForEachList("FOR_EACH_LIST", "ACTIVE_LIST")

        RazorBladeDrawBack parent
        Group targetGroup

        eventMethod Impact
            local Missile dummyMissile = params.Missile.GetTrigger()

            local thistype this = dummyMissile.GetData()

            local RazorBladeDrawBack = this.parent

            if thistype.ACTIVE_LIST_Remove(this) then
                call thistype.UPDATE_TIMER.Pause()
            endif

            call dummyMissile.Destroy()

            if (parent.remainingBladesAmount == 1) then
                call parent.Ending()
            else
                set parent.remainingBladesAmount = parent.remainingBladesAmount - 1
            endif
        endmethod

        static method TargetConditions takes nothing returns boolean
            local Unit target = UNIT.Event.Native.GetFilter()

            if Group.TEMP.ContainsUnit(target) then
                return false
            endif

            if target.Classes.Contains(UnitClass.DEAD) then
                return false
            endif
            if target.IsAllyOf(User.TEMP) then
                return false
            endif

            return true
        endmethod

        static method Update takes nothing returns nothing
            local real areaRange
            local Unit caster
            local real damage
            local Missile dummyMissile
            local integer iteration
            local Unit target
            local Group targetGroup
            local thistype this

            call thistype.FOR_EACH_LIST_Set()

            loop
                set this = thistype.FOR_EACH_LIST_FetchFirst()

                exitwhen (this == NULL)

                set areaRange = parent.areaRange
                set caster = parent.caster
                set damage = parent.damage
                set dummyMissile = this.dummyMissile
                set targetGroup = this.targetGroup

                set Group.TEMP = targetGroup
                set User.TEMP = caster.Owner.Get()

                call thistype.ENUM_GROUP.EnumUnits.InRange.WithCollision.DoWithZ(dummyMissile.Position.X.Get(), dummyMissile.Position.Y.Get(), dummyMissile.Position.Z.Get(), areaRange, thistype.TARGET_FILTER)

                set target = thistype.ENUM_GROUP.FetchFirst()

                if (target != NULL) then
                    loop
                        call target.Effects.Create(thistype.TARGET_EFFECT_PATH, thistype.TARGET_EFFECT_ATTACH_POINT, EffectLevel.NORMAL).Destroy()
                        call targetGroup.AddUnit(target)

                        call caster.DamageUnitBySpell(target, damage, false, true)

                        set target = thistype.ENUM_GROUP.FetchFirst()
                        exitwhen (target == NULL)
                    endloop
                endif
            endloop
        endmethod

        method StartBlade takes nothing returns nothing
            local Missile dummyMissile = Missile.Create()
            local RazorBladeDrawBack parent = this

            set this = thistype.allocate()

            set this.dummyMissile = dummyMissile
            set this.parent = parent
            set this.targetGroup = Group.Create()

            call dummyMissile.Acceleration.Set(500.)
            call dummyMissile.CollisionSize.Set(thistype.AREA_RANGE[level])
            call dummyMissile.DummyUnit.Create(thistype.DUMMY_UNIT_ID, 1.)//.AddEffect(thistype.MISSILE_EFFECT_PATH, thistype.MISSILE_EFFECT_ATTACH_POINT, EffectLevel.NORMAL)
            call dummyMissile.Impact.SetAction(function thistype.Impact)
            call dummyMissile.SetData(this)
            call dummyMissile.Speed.Set(850.)
            call dummyMissile.Position.Set(sourceX, sourceY, sourceZ)

            call dummyMissile.GoToUnit.Start(caster, false)

            if thistype.ACTIVE_LIST_Add(this) then
                call thistype.UPDATE_TIMER.Start(thistype.UPDATE_TIME, true, function thistype.Update)
            endif
        endmethod

        static method Init takes nothing returns nothing
            set thistype.ENUM_GROUP = Group.Create()
            set thistype.TARGET_FILTER = BoolExpr.GetFromFunction(function thistype.TargetConditions)
            set thistype.UPDATE_TIMER = Timer.Create()
        endmethod
    endstruct
endscope

//! runtextmacro BaseStruct("RazorBladeDrawBack", "RAZOR_BLADE_DRAW_BACK")
    real areaRange
    Unit caster
    real damage
    Timer intervalTimer
    integer remainingBladesAmount

    static method Ending takes nothing returns nothing
        local Timer intervalTimer = this.intervalTimer

        call this.deallocate()
        call intervalTimer.Destroy()
    endmethod

    static method Interval takes nothing returns nothing
        local thistype this = Timer.GetExpired().GetData()

        call this.StartBlade()
    endmethod

    static method Start takes Unit caster, integer level, real sourceX, real sourceY, real sourceZ returns nothing
        local Timer intervalTimer = Timer.Create()
        local thistype this = thistype.allocate()

        set this.areaRange = thistype.AREA_RANGE[level]
        set this.caster = caster
        set this.damage = thistype.DAMAGE[level]
        set this.intervalTimer = intervalTimer
        set this.remainingBladesAmount = thistype.INTERVALS_AMOUNT[level]

        call intervalTimer.Start(thistype.INTERVAL[level], true, function thistype.Interval)
    endmethod

    static method Init takes nothing returns nothing
        call thistype(NULL).Blade.Init()
    endmethod
endstruct

//! runtextmacro Folder("RazorBlade")
    //! runtextmacro Struct("Vamp")
        static method Event_BuffLose takes nothing returns nothing
            call params.Unit.GetTrigger().SpellVamp.Bonus.Subtract(thistype.SPELL_VAMP_INC[params.Buff.GetLevel()])
        endmethod

        static method Event_Unlearn takes nothing returns nothing
            call params.Unit.GetTrigger().Buffs.Remove(thistype.DUMMY_BUFF)
        endmethod

        static method Event_BuffGain takes nothing returns nothing
            call params.Unit.GetTrigger().SpellVamp.Bonus.Add(thistype.SPELL_VAMP_INC[params.Buff.GetLevel()])
        endmethod

        static method Event_Learn takes nothing returns nothing
            call params.Unit.GetTrigger().Buffs.AddFresh(thistype.DUMMY_BUFF, params.Spell.GetLevel())
        endmethod

        static method Init takes nothing returns nothing
            call thistype.DUMMY_BUFF.Event.Add(Event.Create(UNIT.Buffs.Events.Gain.DUMMY_EVENT_TYPE, EventPriority.SPELLS, function thistype.Event_BuffGain))
            call thistype.DUMMY_BUFF.Event.Add(Event.Create(UNIT.Buffs.Events.Lose.DUMMY_EVENT_TYPE, EventPriority.SPELLS, function thistype.Event_BuffLose))
            call RazorBlade.THIS_SPELL.Event.Add(Event.Create(UNIT.Abilities.Events.Learn.CHANGE_LEVEL_EVENT_TYPE, EventPriority.SPELLS, function thistype.Event_Learn))
            call RazorBlade.THIS_SPELL.Event.Add(Event.Create(UNIT.Abilities.Events.Learn.DUMMY_EVENT_TYPE, EventPriority.SPELLS, function thistype.Event_Learn))
            call RazorBlade.THIS_SPELL.Event.Add(Event.Create(UNIT.Abilities.Events.Unlearn.DUMMY_EVENT_TYPE, EventPriority.SPELLS, function thistype.Event_Unlearn))
        endmethod
    endstruct
endscope

//! runtextmacro BaseStruct("RazorBlade", "RAZOR_BLADE")
    static Group ENUM_GROUP
    static BoolExpr TARGET_FILTER
    //! runtextmacro CreateHumanEyeTime("UPDATE_TIME", "2")

    Unit caster
    real damage
    Missile dummyMissile
    integer level
    Group targetGroup
    real targetX
    real targetY
    Timer updateTimer

    //! runtextmacro LinkToStruct("RazorBlade", "DrawBack")
    //! runtextmacro LinkToStruct("RazorBlade", "Vamp")

    eventMethod Impact
        local Missile dummyMissile = params.Missile.GetTrigger()

        local thistype this = dummyMissile.GetData()

        local Unit caster = this.caster
        local integer level = this.level
        local Timer updateTimer = this.updateTimer
        local real x = dummyMissile.Position.X.Get()
        local real y = dummyMissile.Position.Y.Get()
        local real z = dummyMissile.Position.Z.Get()

        call this.deallocate()
        call dummyMissile.Destroy()
        call updateTimer.Destroy()

        call DrawBack.Start(caster, level, x, y, z)
    endmethod

    static method TargetConditions takes nothing returns boolean
        local Unit target = UNIT.Event.Native.GetFilter()

        /*if Group.TEMP.ContainsUnit(target) then
            return false
        endif*/

        if target.Classes.Contains(UnitClass.DEAD) then
            return false
        endif
        if target.IsAllyOf(User.TEMP) then
            return false
        endif

        return true
    endmethod

    static method Update takes nothing returns nothing
        local real damage
        local Unit target
        local thistype this = Timer.GetExpired().GetData()

        local Unit caster = this.caster
        local Missile dummyMissile = this.dummyMissile
        local Group targetGroup = this.targetGroup
        local real targetX = this.targetX
        local real targetY = this.targetY

        set Group.TEMP = targetGroup
        set User.TEMP = caster.Owner.Get()

        call thistype.ENUM_GROUP.EnumUnits.InRange.WithCollision.DoWithZ(dummyMissile.Position.X.Get(), dummyMissile.Position.Y.Get(), dummyMissile.Position.Z.Get(), thistype.THIS_SPELL.GetAreaRange(level), thistype.TARGET_FILTER)

        set target = thistype.ENUM_GROUP.FetchFirst()

        if (target != NULL) then
            set damage = this.damage
            set targetGroup = this.targetGroup

            loop
                if (Group.TEMP.ContainsUnit(target) == false) then
                    call target.Effects.Create(thistype.TARGET_EFFECT_PATH, thistype.TARGET_EFFECT_ATTACH_POINT, EffectLevel.NORMAL).Destroy()
                    call target.Position.Timed.Accelerated.AddKnockback(650., -200., Math.AtanByDeltas(targetY - target.Position.Y.Get(), targetX - target.Position.X.Get()), 1.)
                    call targetGroup.AddUnit(target)

                    call caster.DamageUnitBySpell(target, damage, false, true)
                endif

                set target = thistype.ENUM_GROUP.FetchFirst()
                exitwhen (target == NULL)
            endloop
        endif
    endmethod

    static method Event_SpellEffect takes nothing returns nothing
        local Unit caster = params.Unit.GetTrigger()
        local Missile dummyMissile = Missile.Create()
        local integer level = params.Spell.GetLevel()
        local real targetX = params.Spot.GetTargetX()
        local real targetY = params.Spot.GetTargetY()
        local thistype this = thistype.allocate()
        local Timer updateTimer = Timer.Create()

        local real casterX = caster.Position.X.Get()
        local real casterY = caster.Position.Y.Get()
        local real maxLength = thistype.MAX_LENGTH[level]

        local real angle = caster.CastAngle(targetX - casterX, targetY - casterY)

        set targetX = casterX + maxLength * Math.Cos(angle)
        set targetY = casterY + maxLength * Math.Sin(angle)

        set this.caster = caster
        set this.damage = thistype.DAMAGE[level]
        set this.dummyMissile = dummyMissile
        set this.level = level
        set this.targetGroup = Group.Create()
        set this.targetX = targetX
        set this.targetY = targetY
        set this.updateTimer = updateTimer
        call updateTimer.SetData(this)

        call dummyMissile.Acceleration.Set(-400.)
        call dummyMissile.CollisionSize.Set(thistype.THIS_SPELL.GetAreaRange(level))
        call dummyMissile.DummyUnit.Create(thistype.DUMMY_UNIT_ID, 2.)//.AddEffect(thistype.MISSILE_EFFECT_PATH, thistype.MISSILE_EFFECT_ATTACH_POINT, EffectLevel.NORMAL)
        call dummyMissile.Impact.SetAction(function thistype.Impact)
        call dummyMissile.SetData(this)
        call dummyMissile.Speed.Set(1100.)
        call dummyMissile.Position.SetFromUnit(caster)

        call dummyMissile.GoToSpot.Start(targetX, targetY, Spot.GetHeight(targetX, targetY) + UNIT_TYPE.Impact.Z.STANDARD)

        call updateTimer.Start(thistype.UPDATE_TIME, true, function thistype.Update)
    endmethod

    static method Init takes nothing returns nothing
        set thistype.ENUM_GROUP = Group.Create()
        set thistype.TARGET_FILTER = BoolExpr.GetFromFunction(function thistype.TargetConditions)
        call thistype.THIS_SPELL.Event.Add(Event.Create(UNIT.Abilities.Events.Effect.DUMMY_EVENT_TYPE, EventPriority.SPELLS, function thistype.Event_SpellEffect))

        call thistype(NULL).DrawBack.Init()
        call thistype(NULL).Vamp.Init()
    endmethod
endstruct